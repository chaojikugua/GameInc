{
// Events Collection
"Collection": [
    // Company money-related events
    {
        "id": "Company_Bankrupcy",
        "name": "Bankrupcy !",
        "descriptionEnglish" : """
Looks like you're in troubles !

Just this once, the government will bail you out with {Company_BailOut_Amount}k.

Be careful now, next time will be game over...
""",
        "onInit": "const Company_BailOut_Trigger : float = -200.0; const Company_BailOut_Amount : float = 400.0;",
        "triggerCondition": "($Company.NeverBailedOut) && ($Company.Money < Company_BailOut_Trigger)",
        "triggerAction": "$Company.NeverBailedOut = false; $Company.Money += Company_BailOut_Amount;",
        "triggerLimit": "1",
    },

    // Engine-related events
    {
        "id": "Company_Engine_CanDevelop",
        "name": "Custom Engine development unlocked !",
        "descriptionEnglish": "Having completed {Engine_CanDevelop_MinGames} games, you can now develop your own Game Engine !",
        "onInit": """
// comments will not be removed in a JSON multi-string
let Engine_CanDevelop_MinGames: int = 3; // comment
let Engine_CanDevelop_MinDate: date = 1984/02/01;
""",
        "triggerCondition": """
(Company.Projects.CompletedGamesCount() >= Engine_CanDevelop_MinGames) &&
($World.CurrentDate >= Engine_CanDevelop_MinDate)
""",
        "triggerAction": "Company.SetFeature(@Engine.CanDevelop, true)",
        "triggerLimit": "1",
    },

    // Test events
    {
        "id": "Test",
        "name": "Script System Test Event",
        "descriptionEnglish": "...",
        "onInit": "const constant: int = 2; let variable: int = 2;",
        "triggerCondition": "$World.CurrentDate.DayOfWeek == 4",
        "triggerAction": "variable -= 1; constant -= 1;",
        "triggerLimit": "1",
    },
],
}
